package patmat

import org.scalatest.FunSuite

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

import patmat.Huffman._

@RunWith(classOf[JUnitRunner])
class HuffmanSuite extends FunSuite {
  trait TestTrees {
    val t1 = Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5)
    val t2 = Fork(Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5), Leaf('d',4), List('a','b','d'), 9)
  }

  test("weight of a larger tree") {
    new TestTrees {
      assert(weight(t1) === 5)
    }
  }

  test("chars of a larger tree") {
    new TestTrees {
      assert(chars(t2) === List('a','b','d'))
    }
  }

  test("string2chars(\"hello, world\")") {
    assert(string2Chars("hello, world") === List('h', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd'))
  }
  
  test("makeOrderedLeafList for some frequency table") {
    assert(makeOrderedLeafList(List(('t', 2), ('e', 1), ('x', 3))) === List(Leaf('e',1), Leaf('t',2), Leaf('x',3)))
  }

  test("combine of some leaf list") {
    val leaflist = List(Leaf('e', 1), Leaf('t', 2), Leaf('x', 4))
    val expected = List(Fork(Leaf('e',1),Leaf('t',2),List('e', 't'),3), Leaf('x',4))
    val result = combine(leaflist)
    assert(result === expected)
  }
  
  test("combine of some leaf list using until") {
    val leaflist = List(Leaf('e', 1), Leaf('t', 2), Leaf('x', 4))
    val combined = until(singleton,combine)(leaflist)
    assert(combined.length === 1)
  }
  
  test("times test"){
    new TestTrees {
      val chars = string2Chars("hello, world")
      val analysis = times(chars)
      val expected = List(('h',1), ('e',1), ('l',3), ('o',2), (',',1),(' ',1), ('w',1), ('r',1), ('d',1))
      println(expected)
      println(analysis)
      assert(analysis.equals(expected))
      val top = analysis(0)
      top match {
        case ('l',3) => assert(true)
        case _ => assert(false)
      }
    }    
  }
  
//  test("until method on things") {
//    val leaflist = List(Leaf('e', 1), Leaf('t', 2), Leaf('x', 4))
//    val isEmpty: List[CodeTree] => Boolean = _.isEmpty
//    def remover(before: List[CodeTree]) :List[CodeTree] = before match {
//      case Nil => Nil
//      case x :: xs => xs
//    }
//    
//    val allGone = until(isEmpty, remover) (leaflist)
//    
//    assert(allGone.length == 0)
//  }

  test("decode and encode a very short text should be identity") {
    new TestTrees {
      assert(decode(t1, encode(t1)("ab".toList)) === "ab".toList)
    }
  }
  

  
   test("code buildup") {
          
    new TestTrees {
      val message = string2Chars("hello, world")
       val ct = createCodeTree(message)
      assert(true)
    }
  }
}
